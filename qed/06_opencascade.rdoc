= OpenCascade

OpenCascade is subclass of OpenObject. It differs in a few
significant ways.

   require 'hashery/opencascade'

The main reason this class is labeled "cascade", every internal
Hash is transformed into an OpenCascade dynamically upon access.
This makes it easy to create "cascading" references.

    h = { :x => { :y => { :z => 1 } } }
    c = OpenCascade[h]
    c.x.y.z.assert == 1

As soon as you access a node it automatically becomes an OpenCascade.

    c = OpenCascade.new
    c.r.assert.is_a? OpenCascade
    c.a.b.assert.is_a? OpenCascade

But if you set a node, then that will be it's value.

    c.a.b = 4
    c.a.b.assert == 4

To query a node without causing the auto-creation of an OpenCasade
object, use the ?-mark.

   c.a.z?.assert == nil

Like OpenObject, OpenCascade allows you to insert entries as array
pairs.

   c = OpenCascade.new
   c << [:x,8]
   c << [:y,9]

   c.x.assert == 8
   c.y.assert == 9

Finally, you can call methods ending in a !-mark to access the
underlying hash (Note that these differ in behavior from the
built-in !-methods).

   bk = c.map!{ |k,v| k.to_s.upcase }
   bk.sort.assert ==  ['X', 'Y']

So you can see that for the most an OpenCascade is just like
OpenObject, but it allows you to conveniently build open sub-layers. 

